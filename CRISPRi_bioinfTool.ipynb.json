{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SERSYN-PWY\n",
      "Pathway:  L-serine biosynthesis\n",
      "Do you want to knockdown this function? yes or no.yes\n",
      "Gene: serC, GeneID: EG10946\n",
      "promoter:  PM0-46323\n",
      "promoter:  PM921\n",
      "promoter:  PM921\n",
      "Gene: serA, GeneID: EG10944\n",
      "promoter:  PM0-2522\n",
      "promoter:  PM00308\n",
      "Gene: serB, GeneID: EG10945\n",
      "promoter:  PM00509\n",
      "ENTBACSYN-PWY\n",
      "Pathway:  enterobactin biosynthesis\n"
     ]
    }
   ],
   "source": [
    "from IPython.display import display, Image\n",
    "import xml.etree.ElementTree as ET\n",
    "import requests\n",
    "import pythoncyc as pc\n",
    "#import untangle\n",
    "#import biopython\n",
    "\n",
    "# this function finds all pathways associated with the molecule of interest. needs work on front end to \n",
    "# allow user to define G.O. function associated with molecule.\n",
    "def pathwayFromCompound(compound):\n",
    "    #request pathway xml from ecocyc server\n",
    "    resp = requests.get(\"http://ecocyc.org/apixml?fn=pathways-of-compound&id=ECOLI:{}\".format(compound))\n",
    "    #builds element tree from the response xml text file\n",
    "    root = ET.fromstring(resp.text)\n",
    "    #pulls all elements associated with Pathway tag\n",
    "    pathways = root.findall(\"./Pathway\")\n",
    "    #pulls all pathway IDs\n",
    "    for pathway in pathways:\n",
    "        pathID = pathway.attrib['frameid']\n",
    "        print (pathID)\n",
    "        print \"Pathway: \", pathway.findall(\"common-name\")[0].text\n",
    "        #instead of this we can present a tree of the biokernel\n",
    "        userPath = raw_input(\"Do you want to knockdown this function? yes or no.\")\n",
    "        if userPath == \"yes\":\n",
    "            genesFromPathway(pathID)\n",
    "        else:\n",
    "            continue\n",
    "\n",
    "# this function pulls all geneIDs associated with the pathwayID passed into it\n",
    "def genesFromPathway(pathwayID):\n",
    "    resp  = requests.get(\"http://ecocyc.org/apixml?fn=genes-of-pathway&id=ECOLI:{}\".format(pathwayID))\n",
    "    root = ET.fromstring(resp.text)\n",
    "    #print(resp.text)\n",
    "    genes = root.findall(\"./Gene\")\n",
    "    \n",
    "    for gene in genes:\n",
    "        geneID = gene.attrib['frameid']\n",
    "        geneName = gene.findall(\"common-name\")[0].text\n",
    "        print \"Gene: \" + geneName + \", GeneID: \" + geneID\n",
    "        getPromoter(geneID)\n",
    "\n",
    "# this function pulls the promoterIDs associated with the geneID passed into it\n",
    "def getPromoter(geneID):\n",
    "    resp  = requests.get(\"http://ecocyc.org/apixml?fn=transcription-units-of-gene&id=ECOLI:{}\".format(geneID))\n",
    "    root=ET.fromstring(resp.text)\n",
    "    #print(resp.text)\n",
    "    promoters=root.findall(\"./Transcription-Unit/component/Promoter\")\n",
    "    #print promoters\n",
    "    for promoter in promoters:\n",
    "        pID = promoter.attrib['frameid']\n",
    "        #regulon = ecoli.containing_chromosome(pID)\n",
    "        print \"promoter: \",pID \n",
    "        #print(regulon)\n",
    "\n",
    "ecoli = pc.select_organism(\"ECOLI\")\n",
    "pathwayFromCompound(\"SER\")\n",
    "#genesFromPathway(\"HISTSYN-PWY\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [py27]",
   "language": "python",
   "name": "Python [py27]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
